When would you want to use a remote repository rather than keeping all your work
local?

    * When I'm collaborating with other people on a project
    * When I want to share my code with someone
    * When I want to be able to edit code from multiple different computers and keep the code up-to-date on all the computers.
    * Can be a good way to keep a backup of my work.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    * When working on code, it doesn't change without me expecting it
    * Ex. If new code version of some code is broken, I won't pull that change until the bug is fixed.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks, clones, and branches are all ways to add new changes without
    affecting the existing version.

    Branches: New changes are added into the same repository.
    Branching is used for most cases where you want to add a new changes to a repository while keeping an easy reference to a previous version. Works well when collaborating with others or testing experimental features.

    Forking and cloning both copy an entire repository to a new location.

    Forking: Is a special construct made by GitHub.  You can only fork a GitHub
    repository to another location on GitHub.
    Best used when you want to make changes to someone elses repository which you don't have permission to modify the original.

    Cloning: You can clone any Git repository to anywhere you have access to.
    Best used when you want to work on a repository locally rather than using GitHub.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    If I am about to go without Internet access for a while, I can update my local copy before I leave.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would suggest using Dropbox, that way we can share files and they would update as changes are made.
    It is much easier to set up and edit, however, problems arise when we start working on the same file. Doing this would cause edits made by one colaborator to be lost if the same file is edited at the same time.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    * When working with large groups, or working on an experimental feature. Working on separate branches ensure a working state master branch.
    * When working on my own it would be more effective to work directly in the master branch.
